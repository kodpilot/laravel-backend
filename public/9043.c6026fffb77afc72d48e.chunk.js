"use strict";(self.webpackChunkdandelion_pro=self.webpackChunkdandelion_pro||[]).push([[9043],{149043:(e,o,n)=>{n.r(o),n.d(o,{default:()=>y});n(989526);var i=n(798463),t=n(457273),r=n.n(t),d=n(635754),s=n.n(d),a=n(84322),c=n.n(a),l=n(540754),h=n(750940);var p;function m(e,o,n,i){p||(p="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var t=e&&e.defaultProps,r=arguments.length-3;if(o||0===r||(o={children:void 0}),1===r)o.children=i;else if(r>1){for(var d=new Array(r),s=0;s<r;s++)d[s]=arguments[s+3];o.children=d}if(o&&t)for(var a in t)void 0===o[a]&&(o[a]=t[a]);else o||(o=t||{});return{$$typeof:p,type:e,key:void 0===n?null:""+n,ref:null,props:o,_owner:null}}var u=m(h.z2,{}),v=m(h.J9,{}),g=m(s(),{children:" | innerWidth | xs | sm | md | lg | xl |\n | - | - | - | - | - | - |\n | width  |   xs   |   sm   |   md   |   lg   |   xl |\n | smUp   |   show | hide  |\n | mdDown |        |       |     hide | show |",remarkPlugins:[c()]}),f=m(h.Uo,{}),w=m(h.au,{});const y=function(){const e=r().name+" - Layout",o=r().desc,n="containers/Layouts/demos/";return m("div",{},void 0,m(i.ql,{},void 0,m("title",{},void 0,e),m("meta",{name:"description",content:o}),m("meta",{property:"og:title",content:e}),m("meta",{property:"og:description",content:o}),m("meta",{property:"twitter:title",content:e}),m("meta",{property:"twitter:description",content:o})),m(l.gk,{title:"Media Queries",icon:"ion-ios-phone-portrait",desc:"CSS media queries is the idiomatic approach to make your UI responsive.. We provide some CSS-in-JS helpers to do so. In the following demo, we change the background color (red, blue & green) based on the screen width."},void 0,m("div",{},void 0,u,m(l.c6,{componentName:n+"MediaQueries.js"}))),m(l.gk,{title:"With Width",icon:"ion-ios-phone-landscape",desc:"Sometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript. We provide a withWidth() higher-order component for this use case. In the following demo, we change the rendered DOM element (em, u, del & span) based on the screen width."},void 0,m("div",{},void 0,v,m(l.c6,{componentName:n+"WIthWIdth.js"}))),m(l.gk,{overflowX:!0,title:"Hidden",icon:"ion-ios-eye-outline",desc:"Hidden works with a range of breakpoints e.g. xsUp or mdDown, or one or more breakpoints e.g. only='sm' or only={['md', 'xl']}. Ranges and individual breakpoints can be used simultaneously to achieve very customized behavior. The ranges are inclusive of the specified breakpoints."},void 0,m("div",{},void 0,g,f,m(l.c6,{componentName:n+"Breakpoint.js"}))),m(l.gk,{title:"Integration with Grid",icon:"ion-ios-grid",desc:"It is quite common to alter Grid at different responsive breakpoints, and in many cases, you want to hide some of those elements."},void 0,m("div",{},void 0,w,m(l.c6,{componentName:n+"BreakpointGrid.js"}))))}}}]);